===

select
        pe1_0.ATTRIBUTE,
        pe1_0.ENTITY,
        pe1_0.DOUBLE_VALUE,
        pe1_0.INT_VALUE,
        pe1_0.STRING_VALUE,
        pe1_0.TYPE
    from
        PROPERTY pe1_0
    where
        pe1_0.ENTITY in ((select
            distinct pe2_0.ENTITY
        from
            PROPERTY pe2_0
        join
            RELATIONS t1_0
                on pe2_0.ATTRIBUTE=t1_0.FROM_ATTR
                and pe2_0.ENTITY=t1_0.FROM_ENTITY
                and pe2_0.ATTRIBUTE=?
        join
            ENTITY e3_0
                on e3_0.ID=t1_0.TO_ENTITY
        join
            PROPERTY p1_0
                on e3_0.ID=p1_0.ENTITY
        where
            p1_0.ATTRIBUTE=?
            and p1_0.STRING_VALUE=?))
    order by
        pe1_0.ENTITY



=== TODO

- admin service ausplitten + finalisieren
- sql sieht komisch aus
- fehler join graphql?
- parser + like
- projektion mit id geht nicht weil kein join!
- zu viele sqls!
- date -> generell & status, etc. graphql input
- TODO in MVR

=== LATER

- kopieren nach service :-)
- angular :-) mit builder simple

=== NOW



=== DONE

- join children geht, father nicht :-)
- like
- doku
- graphql benchmark?
- test data?
- default value
- applikation
- maven submodule
- date support in graphql ( scalar )
- session 체berlegen
- status
- version counter & optimistic locking
- boolean expression
- updatePerson -> [Person]n
- restliche filter
- fix create relation
- mehrwertige relation
- create + realtion?
- mutation relations?
- join f체r einwertige...
- bulk update
- delete-person
- mutation: create/update
- postman test
- restliche pr채dikate
- Spring einbinden
- 체berlegen syntax select?
- argument
- resolver?????
- TEST
- Schema selber machen
- Transaktionsklammer
- Spring
- @Components
- beispiel java klasse
- hello world